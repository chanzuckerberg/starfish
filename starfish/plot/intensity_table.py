import warnings
from typing import Optional

import matplotlib.axes
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from scipy.stats import pearsonr

from starfish.stats import feature_trace_magnitudes
from starfish.types import Features
from .util import annotate_axis


def spot_area_histogram(
        intensities,
        ax: Optional[matplotlib.axes.Axes],
        bins: int=25,
        log=True,
        **kwargs,
) -> matplotlib.axes.Axes:
    """Plot the distribution of spot areas

    Parameters
    ----------
    intensities : IntensityTable
        IntensityTable containing features to be summarized
    ax : Optional[matplotlib.axes.Axes]
        Axis to plot in. If not provided, defaults to current axis.
    bins :
        Number of bins. Default 25.
    log : bool
        Whether to plot the y-axis of the histogram in log scale.
    kwargs : Dict
        additional keyword arguments to pass to matplotlib.pyplot.hist

    Returns
    -------
    matplotlib.axes.Axes :
        The axis containing the plot

    """
    ax = ax if ax is not None else plt.gca()
    area = (intensities.radius * np.pi) ** 2
    ax.hist(area, bins=bins, log=log, **kwargs)
    annotate_axis(
        ax,
        title='spot area distribution',
        ylabel='number of spots',
        xlabel='area'
    )
    return ax


def spot_distance_histogram(
        intensities,
        ax: Optional[matplotlib.axes.Axes],
        bins=25,
        **kwargs,
) -> matplotlib.axes.Axes:
    """Plot the distribution of distances of features to the nearest barcode (by metric distance)

    Parameters
    ----------
    intensities : IntensityTable
        IntensityTable containing features to be summarized
    ax : Optional[matplotlib.axes.Axes]
        Axis to plot in. If not provided, defaults to current axis.
    bins :
        Number of bins. Default 25.
    kwargs : Dict
        additional keyword arguments to pass to matplotlib.pyplot.hist
    intensities

    Returns
    -------
    matplotlib.axes.Axes :
        The axis containing the plot

    """
    ax = ax if ax is not None else plt.gca()
    ax.hist(intensities[Features.DISTANCE].values, bins=bins, **kwargs)
    annotate_axis(
        ax,
        title='distance to nearest\ncode distribution',
        ylabel='number of features',
        xlabel='distance to nearest code'
    )
    return ax


def barcode_magnitude_histogram(
        intensities,
        ax: Optional[matplotlib.axes.Axes],
        log=True,
        bins=100,
        **kwargs,
) -> matplotlib.axes.Axes:
    """Plot the distribution of barcode magnitudes.

    Parameters
    ----------
    intensities : IntensityTable
        IntensityTable containing features to be summarized
    ax : Optional[matplotlib.axes.Axes]
        Axis to plot in. If not provided, defaults to current axis.
    bins :
        Number of bins. Default 25.
    log : bool
        Whether to plot the y-axis of the histogram in log scale.
    kwargs : Dict
        additional keyword arguments to pass to matplotlib.pyplot.hist

    Returns
    -------
    matplotlib.axes.Axes :
        The axis containing the plot

    """
    ax = ax if ax is not None else plt.gca()
    magnitudes = feature_trace_magnitudes(intensities, norm_order=2)

    ax.hist(magnitudes, log=log, bins=bins, **kwargs)
    annotate_axis(
        ax,
        title='barcode magnitude\ndistribution',
        ylabel='number of pixels',
        xlabel='barcode magnitude'
    )

    return ax


# TODO ambrosejcarr: do we want equal sized axes here?
def compare_copy_number(
        intensities,
        other: pd.Series,
        ax: Optional[matplotlib.axes.Axes]=None,
        **kwargs,
) -> matplotlib.axes.Axes:
    """
    Plot the copy number of gene expression across all cells against a reference generated by
    another computational approach. Report the $r^2$ value.

    Parameters
    ----------
    intensities : IntensityTable
        decoded IntensityTable
    other : pd.Series
        A pandas series whose index contains gene names and whose values are expression abundances
    ax : Optional[matplotlib.axes.Axes]
        The axis in which to plot the figure. Defaults to the current axis if not provided.
    kwargs : Dict
        Additional keyword arguments to pass to sns.regplot

    Returns
    -------
    matplotlib.axes.Axes :
        The axis containing the plot.

    """

    ax = ax if ax is not None else plt.gca()
    targets, counts = np.unique(intensities[Features.TARGET].values, return_counts=True)
    this = pd.Series(counts, index=targets)
    tmp = pd.concat([this, other], join='outer', axis=1, sort=True)
    tmp.columns = ['result', 'comparison']

    # this seaborn function does not accept an axis, but we can make sure it draws to the right
    # place by setting the current axis
    with warnings.catch_warnings():
        warnings.simplefilter('ignore', FutureWarning)
        sns.regplot('comparison', 'result', data=tmp, ax=ax, **kwargs)

    # calculate the correlation coefficient
    # mask nans
    tmp = tmp.dropna()
    r, _ = pearsonr(tmp['result'], tmp['comparison'])

    plt.text(0.1, 0.85, f'r = {r:.3}', transform=ax.transAxes, fontsize=14)
    return ax
